  c++语言支持广泛的数据类型.
  字符、整型、浮点数,提供自定义数据类型的机制.
  c++标准库定义了如可变长字符串和向量
1.基本内置类型
  算术类型和空类型（void）
  算术类型：整型和浮点型
  c++ vs编译器中,bool 1字节,char 1字节,int 4字节,short 2字节,long 4字节，long long 8字节，long long是c++11新定义的.
  float 4字节,double 8字节,long double以12或16字节存储.
  执行浮点数运算选double,float精度不够且double和float计算代价相差无几.
2.类型转换
  bool b=42 //b为真
  int i=b; //i=1
  i=3.14; //i=3;
  double pi=i; // pi=3.0
  unsigned char c=-1;  // char 为1字节 c=255 超出表示范围，结果为初始值对无符号类型标识数值总数取模后的余数.
  signed char c2=256;  // c2的值未定义
3.含有无符号类型的表达式
  算术表达式既有无符号数又有int值，int值会转换成无符号数.
  unsigned u=10;
  int i=-42;
  cout<<i+u<<endl;  //输出 2^32-32
  切勿混用带符号类型和无符号类型
4.字符和字符串字面值
  char型字面值 由单引号括起来的一个字符
  字符串型字面值 双引号括起来的零个或多个字符 实际长度比内容多1.
  转义序列
  换行\n 制表符 \t 反斜线\\ 问号\? 双引号\" 单引号 \' 回车\r
  转义序列被当作一个字符
  \1234表示2个字符\123 和 4
  十进制 20 八进制 024 十六进制0x14
5.对象和变量 
  （1）对象是指一块能存储数据并具有某种类型的内存空间.
      double price = 109.99,discount = price * 0.16;√
  （2）初始化--创建变量时,赋予其一个初始值.
      赋值--把对象的当前值擦除,以新值代替.
  （3）列表初始化--c++11的新标准用花括号来初始化变量得到全面应用.
      列表初始化用于内置类型时，初始值存在丢失信息的风险时,编译器将报错.
      long double ld=3.1415926536;
      int a{ld}; // 报错
  （4）默认初始化
      定义变量时没有指定初值,则变量被默认初始化.
      内置类型定义于函数体之外，被初始化为0，定义在函数体内，不被初始化.
      string 无论定义在函数体内还是外都是空串
6.变量声明和定义的关系
    为支持分离式编译，声明和定义区分开.
    如果声明一个变量而非定义它,就在变量名前添加关键字extern.
    extern int i; //声明不定义
    int j;  //声明并定义j.
    extern double pi=3.1416; //定义
    在函数体内部,如果试图初始化一个extern标记的变量,将出错.
    ！变量只能定义一次,但可以声明多次.
    如果在多个文件中使用同一变量,必须声明和定义分离.定义只能一次,不能重复定义.
7.静态类型,c++是静态类型语言,编译阶段检查类型.python是动态类型语言,运行时检查类型.
  程序越复杂,静态类型检查越有助于发现问题.
8.标识符
  字母、数字、下划线.且必须以字母或下划线开头.大小写敏感.
  关键字不可以.
  c++中,用户自定义的标识符不能出现连续两个下划线,也不能下划线紧连大写字母开头,定义在函数体外的标识符不能以下划线开头.
9.变量命名规范
  变量名一般小写字母.
  用户自定义类一般大写字母开头.多个单词组成，要有明显区分. 如Sales_item
10.名字的作用域
  全局作用域、块作用域
  建议:当你第一次使用变量时，再定义它.
  int reused = 42;
  int main()
  {
    cout<<reused; //42
    int reused=0;
    cout<<reused; //0
    cout<<::reused; //42
  }
  int reused = 42;
  int main()
  {
    cout<<reused; //42
    reused=0;
    cout<<reused; //0
    cout<<::reused; //42×0√
  }
  
  
