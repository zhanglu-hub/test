1.关键字const
  const对象一旦创建后其值就不能再改变,所以const对象必须初始化.初始值可以是任意复杂的表达式.
  int i=42;
  const int ci=i; //√
  int j = ci;   //√
  默认情况下,const对象仅在文件内有效.当多个文件中出现了同名的const变量时,等于在不同文件中分别定义了独立变量.
  如果想只在一个文件中定义const,而在其他多个文件中声明并使用它？
  对于const变量,不管是声明还是定义都添加extern关键字.
  extern const int bufSize=fcn();//bufSize是一个常量,必须用extern加以限定使其被其他文件使用.
  extern const int bufSize;//指明bufSize并非本文件独有.
2.const的引用
  把引用绑定到const对象,称为对常量的引用.
  const int ci=1024;
  const int &r1=ci; //引用和对象都是常量
  r1=42;
  int &r2=ci;  //试图让非常量引用指向一个常量对象
  常量引用
  const int &r2=42;//√
  int &r4=r1*2;//x r4是一个普通非常量引用
  int i=42
  const int &r5=i;//不允许通过r5改变i
  i=5;但是可以通过其他途径修改,直接赋值或绑定其他引用.
3.指针和const
  指向常量的指针
  const double pi=3.14;
  double *ptr=&pi; //x
  const doube *cptr=&pi; //√
  *cptr=42;//x
  const指针
  常量指针 必须初始化,把*放在const关键字之前,说明指针是一个常量,不变的是指针本身的值而非指向的值.
  int errNumb=0;
  int *const curErr=&errNumb; //curErr将一直指向errNumb
4.顶层const
  指针本身是一个对象,指针本身是常量以及指针所指的是不是常量是两个问题.
  顶层const表示指针本身是个常量,底层const表示指针所指对象是常量.
5.constexpr和常量表达式
  常量表达式是指值不会改变并且编译过程就能得到计算结果的表达式.
  c++11新标准 允许将变量声明为constexpr类型,以便编译器来验证变量的值是否是一个常量表达式.
  ！一般来说,你将你认定变量是一个常量表达式,就把它声明为constexpr类型
  constexpr仅对指针有效,与指针所指对象无关.
6.类型别名
  关键字typedef
  typedef double wages; //wages是double的同义词
  typedef wages base,*p;  //base是double的同义词,p是double*的同义词
  c++11新标准,使用别名声明来定义类型的别名.
  using SI=Sales_item;
  （2）指针、常量和类型别名
    某类型别名指代的是复合类型.
    typedef char *pstring;
    const pstring cstr=0; //cstr是一个指针,指向char的常量指针
    const pstring *ps;  //ps是一个指针,指向的对象是指向char的常量指针.
7.auto类型说明符
  编译器替我们分析表达式所属的类型.
  auto让编译器通过初始值来推算变量的类型.所以auto定义的变量必须有初始值.
  auto i=0,*p=&i; //√
  auto sz=0,pi=3.14; //×
  
  int i=0,&r=i;
  auto a=r; //a是一个int
  auto一般会忽略掉顶层const,如果希望推断出的auto类型是一个顶层const,需要明确指出,const auto f = ci;
8.decltype类型指示符
  c++11新标准引入的第二种类型说明符 decltype,选择并返回操作数的数据类型.
  希望从表达式得到定义的变量的类型,但是不想用该表达式的值初始化变量.
  decltype(f()) sum=x; //sum的类型就是函数f的返回类型
  const int ci=0,&cj=ci;
  decltype(ci) x=0; //const int 
  decltype(cj) y=x; //const int&
9.decltype和引用
  int i=42,*p=&i,&r=i;
  decltype(r+0) b; //r是一个引用,如果想让结果类型是r所指的类型,可以把r作为表达式的一部分.
  decltype(*p) c; c是int & ,必须初始化
  decltype((i)) d;//错误,decltype的表达式如果是加上了括号的变量,结果将是引用.
  ！decltype(())双层括号的结果永远是引用
  ！decltype(val)只有内部val是引用时才是引用
  
  
    
  
  
