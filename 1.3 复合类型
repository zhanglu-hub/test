1.引用
  c++11新增了一种引用：右值引用，严格来说，“引用”指的其实是左值引用.
  引用为对象起了另一个名字.
  int val=1024;
  int &refval=val;//refval指向val
  int &refval2 //报错,引用必须初始化
  初始化变量时,初始值会被拷贝到新建的对象.定义引用时,引用和它的初始值绑定,而不是将初始值拷贝给引用.
  一旦初始化,无法重新绑定到另一个对象,因此引用必须初始化.
  ！引用即别名,引用非对象,只是给已经存在的对象起的另一个名字.
2.指针
  指针是“指向”另外一种类型的符合类型.
  指针和引用？
  同：对其他对象的间接访问.
  异：指针本身是一个对象，允许对指针赋值和拷贝,可以更改指向对象.指针无须再定义时赋初值.
  int *p1,*p2;
  获取对象的地址,int ival=42;int *p=&ival;
  因为引用不是对象,没有实际地址,所以不能定义指向引用的指针.
  
  指针有可能指向空指针或无效指针,引用不会指向非法地址.
  int ival=42;
  int *p=&ival;
  cout<<*p; //指针解引用
  c++11新标准 -- 空指针nullptr
  指针相等==指针存放的地址值相等.数相等没有用.
  int *&r=p; //r是一个对指针p的引用.
  r=&i; //p指向i
  *r=0; //*p=0,i=0;
  
  
