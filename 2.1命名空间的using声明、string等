1.命名空间using声明
using namespace::name;
using std::cin;
using namespace std;
头文件不应包含using声明
2.标准库类型string
string表示可变长的字符序列,使用string类型必须首先包含string头文件
string s1;
string s2(s1);
string s2=s1;
string s3("value");
string s3="value";
string s4(n,'c');
= 拷贝初始化
不使用= 直接初始化
3.string对象上的操作
  getline(ls,s) //从ls中读取一行赋给s,返回ls
  s.empty(); s.size(); s[n]返回s中第n个字符; s1+s2;
  s.size()返回的是无符号数,注意无符号数和有符号数的混用会出问题.
4.比较string对象
  按照字典顺序.
  1.两个string长度不同,较短的string对象的每个字符和较长的string对象的对应位置上的字符相同.较短的string对象小于较长的string对象.
  2.对应位置上的字符不同,比较的结果是第一队互异的字符比较的结果.
5.两个string对象相加
  得到一个新的string对象.
6.字面值和string对象相加
  必须保证+的两侧的运算对象至少有一个是string
  string s3="hello"+",";//错误
  string s4="hello"+", "+s2;//错误
  string s6=s1+","+"word";//对
！字符串字面值与string是不同类型.
！string类的输入运算符不会输入空白字符、getline会输入空白字符.
7.处理string对象中的字符
  cctype头文件:
  islower(c) c是小写字母时为真
  isupper(c) c是大写字母时为真
  isxdigit(c) c是十六进制数字时为真
  tolower(c) 将c变为小写字母
  toupper(c) 将c变为大写字母
8.处理每个字符？基于范围的for语句
  C++11新标准提供的一种语句：范围for(range for)语句
  for(auto c: str)
    cout<<c<<endl;
   改变字符串中的字符
   string s("Hello World!!!");
   for(auto &c:s) //c是一个引用
    c=toupper(c);
   cout<<s<<endl;
  ！逻辑与运算符 && C++语言规定只有当左侧运算对象为真时,才会检查右侧运算对象的情况.
  如果下标n是string::size_type类型,n可以确保大于或等于0.
